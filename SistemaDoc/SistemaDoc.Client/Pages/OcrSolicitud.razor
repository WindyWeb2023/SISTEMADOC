@page "/ocr"
@layout MainLayout
@inject IJSRuntime JS
@inject HttpClient Http

<link href="css/formulario.css" rel="stylesheet" />

<div class="form-container">
    <form class="form-box" @onsubmit="GuardarDatos">
        <h2>Procesar Solicitud</h2>

        <input type="file" id="fileInput" @onchange="ProcesarImagen" />
        <textarea @bind="TextoExtraido" rows="5" hidden="hidden" placeholder="Texto extraído..." readonly></textarea>

        <input @bind="Nombre" placeholder="Nombre del Solicitante" />
        <input @bind="CI" hidden="hidden" placeholder="CI" />
        <input @bind="Fecha" placeholder="Fecha de Solicitud" />
        <input @bind="Area" placeholder="Area" />
        <input @bind="Categoria" placeholder="Categoria" />
        <input @bind="Motivo" placeholder="Motivo de la Solicitud" />

        <button type="submit">Guardar</button>
    </form>
</div>

@code {
    string TextoExtraido = "";
    string Nombre = "";
    string CI = "";
    string Fecha = "";
    string Area = "";
    string Categoria = "";
    string Motivo = "";

    int AreaId;
    int CategoriaId;

    async Task ProcesarImagen()
    {
        TextoExtraido = await JS.InvokeAsync<string>("recognizeTextFromImage", "fileInput");
        Nombre = ExtractField(TextoExtraido, "Nombre del Solicitante:");
        CI = ExtractField(TextoExtraido, "CI: ");
        Fecha = ExtractField(TextoExtraido, "Fecha de Solicitud:");
        Area = ExtractField(TextoExtraido, "Area:");
        Categoria = ExtractField(TextoExtraido, "Categoria:");
        Motivo = ExtractField(TextoExtraido, "Motivo de la Solicitud:");

        AreaId = Area.ToLower() switch
        {
            "salud" => 1,
            "educacion" => 2,
            "parque o jardines" => 3,
            _ => 0 // Desconocido
        };

        CategoriaId = Categoria.ToLower() switch
        {
            "mantenimiento" => 1,
            "refaccion" => 2,
            "instalacion" => 3,
            _ => 0
        };
    }
     
    string ExtractField(string input, string label)
    {
        var line = input.Split('\n').FirstOrDefault(l => l.Trim().StartsWith(label));
        return line?.Replace(label, "").Trim() ?? "";
    }

    async Task GuardarDatos()
    {
        var solicitud = new
        {
            NombreSolicitante = Nombre,
            Referencia = Motivo,
            FechaSolicitud = DateTime.TryParse(Fecha, out var f) ? f : DateTime.Now,
            Observaciones = Motivo,
            IdArea = AreaId,
            IdCategoria = CategoriaId
        };

        var response = await Http.PostAsJsonAsync("api/Solicitudes", solicitud);
        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "Guardado exitosamente.");
            TextoExtraido = Nombre = CI = Fecha = Area = Categoria = Motivo = "";
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Error al guardar.:{content}");
        }
    }
}
